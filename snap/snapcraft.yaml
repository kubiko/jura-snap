name: kura-nn

summary: Eclipse Kuraâ„¢, An OSGi-based Application Framework for M2M Service Gateways
description: |
   Until recently, machine-to-machine projects have been approached as embedded systems
   designed around custom hardware, custom software, and custom network connectivity.
   The challenge of developing such projects was given by the large customization
   and integration costs and the small re-usability across similar engagements.
   The results were often proprietary systems leveraging proprietary protocols.

confinement: strict
grade: stable
adopt-info: kura
base: core18

environment:
    JAVA_HOME: $SNAP/jre
    PATH: $SNAP/jre/bin:$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH
    LD_LIBRARY_PATH: $SNAP/lib:$SNAP/usr/lib:$SNAP_LIBRARY_PATH:$SNAP/lib/${SNAPCRAFT_ARCH_TRIPLET}:$SNAP/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}:$LD_LIBRARY_PATH

apps:
    kura:
        command: kura/bin/start_kura_snap.sh
        adapter: none
        daemon: simple
        plugs: 
            - bluez
            - bluetooth-control
            - gpio
            - hardware-observe
            - home
            - io-ports-control
            - log-observe
            - mount-observe
            - netlink-audit
            - network
            - network-bind
            - ppp
            - process-control
            - raw-usb
            - removable-media
            - serial-port
            - shutdown
            - system-observe
            - time-control

    debug:
        command: kura/bin/start_kura_snap_debug.sh
        adapter: none
        plugs:
            - bluez
            - bluetooth-control
            - gpio
            - hardware-observe
            - home
            - io-ports-control
            - log-observe
            - mount-observe
            - netlink-audit
            - network
            - network-bind
            - ppp
            - process-control
            - raw-usb
            - removable-media
            - serial-port
            - shutdown
            - system-observe
            - time-control

    monit:
        command: usr/bin/monit -c $SNAP_COMMON/etc/monitrc
        adapter: none
        daemon: simple

    help:
        command: bin/snap-help
        adapter: none

parts:
    # use zulu for build
    build-jdk:
        plugin: dump
        source:
            - on armhf: https://cdn.azul.com/zulu-embedded/bin/zulu8.42.0.195-ca-jdk1.8.0_232-linux_aarch32hf.tar.gz
            - on arm64: https://cdn.azul.com/zulu-embedded/bin/zulu8.42.0.195-ca-jdk1.8.0_232-linux_aarch64.tar.gz
            - on amd64: https://cdn.azul.com/zulu/bin/zulu8.42.0.23-ca-jdk8.0.232-linux_x64.tar.gz
        organize:
            '*': build-jdk/
        prime:
            - '-*'

    kura:
        plugin: kura
        source: https://github.com/kubiko/kura.git
        source-branch: develop-snap
        after:
            - build-jdk
        build-packages:
            - unzip
            - maven
            - gawk
            - zip
        maven-options:
            - '-Pubuntu-snap'
            - -B
            - -Dmaven.test.skip=true
            - -DskipTest=1
        maven-targets:
            - target-platform
            - kura
            - kura/distrib
        override-build: |
            # use build-jdk instead
            export BUILD_JDK=${SNAPCRAFT_STAGE}/build-jdk/bin
            export JAVA_HOME=${SNAPCRAFT_STAGE}/build-jdk
            snapcraftctl build
            unzip kura/distrib/target/kura_*_ubuntu-snap.zip -d ${SNAPCRAFT_PART_INSTALL}/
            mv ${SNAPCRAFT_PART_INSTALL}/kura_* ${SNAPCRAFT_PART_INSTALL}/kura
            # tweak some config settings
            chmod +x ${SNAPCRAFT_PART_INSTALL}/kura/install/*.raspbian
            chmod +x ${SNAPCRAFT_PART_INSTALL}/kura/install/*.init
            chmod +x ${SNAPCRAFT_PART_INSTALL}/kura/install/if*-local*
            chmod +x ${SNAPCRAFT_PART_INSTALL}/kura/install/*.sh
            chmod +x ${SNAPCRAFT_PART_INSTALL}/kura/install/recover_default_config.init
            snapcraftctl set-version $(grep '^version=' ${SNAPCRAFT_PART_INSTALL}/kura/framework/kura.properties | awk -F '=' '{ print $2}')
            # process config.ini, remove duplicates, alter architecture if needed
            host_arch=$(arch)
            if [ "${SNAPCRAFT_ARCH_TRIPLET}" = "arm-linux-gnueabihf" ]; then
                target_arch="armv6hf"
            elif [ "${SNAPCRAFT_ARCH_TRIPLET}" = "aarch64-linux-gnu" ]; then
                target_arch="aarch64"
            elif [ "${SNAPCRAFT_ARCH_TRIPLET}" = "x86_64-linux-gnu" ]; then
                target_arch="x86_64"
            else
                echo "Building for unsupported target architecture!!!!!"
                exit 1
            fi

            new_bundles=$(grep "osgi.bundles=" ${SNAPCRAFT_PART_INSTALL}/kura/framework/config.ini \
                | awk  '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}' \
                | sed -e 's/'"${host_arch}"'/'"${target_arch}"'/g')
            case ${SNAPCRAFT_PROJECT_NAME} in
                *-nn)
                    echo "Building NO-network version snap, removing network bundles"
                    linux_net=$(echo ${new_bundles} | tr ' ' '\n' | grep org.eclipse.kura.linux.net_ | sed 's/[\/&]/\\&/g')
                    net_admin=$(echo ${new_bundles} | tr ' ' '\n' | grep org.eclipse.kura.net.admin_ | sed 's/[\/&]/\\&/g')
                    deb_provider=$(echo ${new_bundles} | tr ' ' '\n' | grep org.eclipse.kura.linux.debian.provider_ | sed 's/[\/&]/\\&/g')
                    snap_provider=$(echo ${new_bundles} | tr ' ' '\n' | grep org.eclipse.kura.linux.snapctl.provider_ | sed 's/[\/&]/\\&/g')
                    new_bundles=$(echo ${new_bundles} | \
                        sed -e 's#'"${linux_net}"'##g' \
                            -e 's#'"${net_admin}"'##g' \
                            -e 's#'"${deb_provider}"'##g' \
                            -e 's#'"${snap_provider}"'##g')
                    ;;
                *)
                    echo "Building network version snap, removing emulator bundles"
                    emulator=$(echo ${new_bundles} | tr ' ' '\n' | grep org.eclipse.kura.emulator_ | sed 's/[\/&]/\\&/g')
                    emulator_net=$(echo ${new_bundles} | tr ' ' '\n' | grep org.eclipse.kura.emulator.net_ | sed 's/[\/&]/\\&/g')
                    new_bundles=$(echo ${new_bundles} | \
                        sed -e 's#'"${emulator}"'##g' \
                            -e 's#'"${emulator_net}"'##g')
                    ;;
            esac
            new_bundles=$(echo ${new_bundles} | sed 's/[\/&]/\\&/g')
            sed -i -e 's/osgi.bundles=.*/'"${new_bundles}"'/g' ${SNAPCRAFT_PART_INSTALL}/kura/framework/config.ini

        organize:
            kura/install/firewall.init:               etc/init.d/firewall
            kura/install/iptables.init:               etc/sysconfig/iptables
            kura/install/ifdown-local:                etc/network/if-down.d/ifdown-local
            kura/install/ifup-local.snap:             etc/network/if-up.d/ifup-local
            kura/install/recover_default_config.init: kura/bin/.recoverDefaultConfig.sh
            kura/install/configuration-nn.json:          bin/configuration.json
        stage:
            - kura
            - etc/init.d/firewall
            - etc/sysconfig/iptables
            - etc/network/if-down.d/ifdown-local
            - etc/network/if-up.d/ifup-local
            - bin/configuration.json

    tools:
        plugin: nil
        stage-packages:
            - to armhf:
                - bash:armhf
                - bluez:armhf
                - coreutils:armhf
                - dbus:armhf
                - dos2unix:armhf
                - dpkg:armhf
                - fdisk:armhf
                - inetutils-telnet:armhf
                - iproute2:armhf
                - jq:armhf
                - kmod:armhf
                - minicom:armhf
                - monit:armhf
                - nano:armhf
                - setserial:armhf
                - openvpn:armhf
                - powertop:armhf
                - socat:armhf
                - telnet:armhf
                - usbutils:armhf
                - unzip:armhf
                - libasound2:armhf
                - libatm1:armhf
                - libcap-ng0:armhf
                - libdbus-1-3:armhf
                - libexpat1:armhf
                - libfdisk1:armhf
                - libmnl0:armhf
                - libudev1:armhf
                - libx11-6:armhf
                - libxau6:armhf
                - libxcb1:armhf
                - libxdmcp6:armhf
                - libxext6:armhf
                - libxi6:armhf
                - libxrender1:armhf
                - libxtables12:armhf
                - libxtst6:armhf
            - to arm64:
                - bash:arm64
                - bluez:arm64
                - coreutils:arm64
                - dbus:arm64
                - dos2unix:arm64
                - dpkg:arm64
                - fdisk:arm64
                - inetutils-telnet:arm64
                - iproute2:arm64
                - jq:arm64
                - kmod:arm64
                - minicom:arm64
                - monit:arm64
                - nano:arm64
                - setserial:arm64
                - openvpn:arm64
                - powertop:arm64
                - socat:arm64
                - telnet:arm64
                - usbutils:arm64
                - unzip:arm64
                - libasound2:arm64
                - libatm1:arm64
                - libcap-ng0:arm64
                - libdbus-1-3:arm64
                - libexpat1:arm64
                - libfdisk1:arm64
                - libmnl0:arm64
                - libudev1:arm64
                - libx11-6:arm64
                - libxau6:arm64
                - libxcb1:arm64
                - libxdmcp6:arm64
                - libxext6:arm64
                - libxi6:arm64
                - libxrender1:arm64
                - libxtables12:arm64
                - libxtst6:arm64
            - to amd64:
                - bash:amd64
                - bluez:amd64
                - coreutils:amd64
                - dbus:amd64
                - dos2unix:amd64
                - dpkg:amd64
                - fdisk:amd64
                - inetutils-telnet:amd64
                - iproute2:amd64
                - jq:amd64
                - kmod:amd64
                - minicom:amd64
                - monit:amd64
                - nano:amd64
                - setserial:amd64
                - openvpn:amd64
                - powertop:amd64
                - socat:amd64
                - telnet:amd64
                - usbutils:amd64
                - unzip:amd64
                - libasound2:amd64
                - libatm1:amd64
                - libcap-ng0:amd64
                - libdbus-1-3:amd64
                - libexpat1:amd64
                - libfdisk1:amd64
                - libmnl0:amd64
                - libudev1:amd64
                - libx11-6:amd64
                - libxau6:amd64
                - libxcb1:amd64
                - libxdmcp6:amd64
                - libxext6:amd64
                - libxi6:amd64
                - libxrender1:amd64
                - libxtables12:amd64
                - libxtst6:amd64

    # java run time
    jre:
        plugin: nil
        override-pull: |
            wget -O index.html https://www.azul.com/downloads/zulu-community
            grep "JSON.stringify(sortArray(" index.html | sed -e "s/localStorage.setItem('arrayZuluBandlesZulu', JSON.stringify(sortArray(//g" -e "s/)));//g" > index.json
            echo "SNAPCRAFT_ARCH_TRIPLET=${SNAPCRAFT_ARCH_TRIPLET}"
            if [ "${SNAPCRAFT_ARCH_TRIPLET}" = "arm-linux-gnueabihf" ]; then
                jq -c 'sort_by(.zulu_version) | .[] | select( .arch == "ARM 32-bit HF" ) | select( .category == "Java 8 (LTS)" ) | select( .arch_slug = "arm-32-bit-hf" ) | select( .packaging_slug == "jdk" ) | select(.os|index( "Linux" ))' index.json | jq -sr '.[-1]' > ${SNAPCRAFT_PART_INSTALL}/zulu_version.json
            elif [ "${SNAPCRAFT_ARCH_TRIPLET}" = "aarch64-linux-gnu" ]; then
                jq -c 'sort_by(.zulu_version) | .[] | select( .arch == "ARM 64-bit" ) | select( .category == "Java 8 (LTS)" ) | select( .arch_slug = "arm-64-bit" ) | select( .packaging_slug == "jdk" ) | select(.os|index( "Linux" ))' index.json | jq -sr '.[-1]' > ${SNAPCRAFT_PART_INSTALL}/zulu_version.json
            elif [ "${SNAPCRAFT_ARCH_TRIPLET}" = "x86_64-linux-gnu" ]; then
                jq -c 'sort_by(.zulu_version) | .[] | select( .arch == "x86 64-bit" ) | select( .category == "Java 8 (LTS)" ) | select( .arch_slug = "x86-64-bit" ) | select( .packaging_slug == "jdk" ) | select(.os|index( "Linux" ))' index.json | jq -sr '.[-1]' > ${SNAPCRAFT_PART_INSTALL}/zulu_version.json
            else
                jq -c 'sort_by(.zulu_version) | .[] | select( .arch == "x86 32-bit" ) | select( .category == "Java 8 (LTS)" ) | select( .arch_slug = "x86-32-bit" ) | select( .packaging_slug == "jdk" ) | select(.os|index( "Linux" ))' index.json | jq -sr '.[-1]' > ${SNAPCRAFT_PART_INSTALL}/zulu_version.json
            fi
            tar_link=$(jq -r '.bundles[] | select (.extension == "tar.gz") | .link' ${SNAPCRAFT_PART_INSTALL}/zulu_version.json )
            wget -O zulu.tar.gz ${tar_link}
            tar -C ${SNAPCRAFT_PART_INSTALL} -xf zulu.tar.gz --strip 1
        stage:
            - -bin
            - -demo
            - -include
            - -lib
            - -man
            - -sample
            - -src.zip
            - -jre/lib/aarch32/client/libjvm.diz
            - -jre/lib/aarch64/server/libjvm.diz
        organize:
            LICENSE: LICENSE_ZULU
            release: release_zulu
        build-packages:
            - jq

    glue:
        plugin: dump
        source: glue


